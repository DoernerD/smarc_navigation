<launch>

  <arg name="debug" default="0"/>
  <arg name="mode" default="default"/>
  <arg name="namespace" default="sam"/>
  <arg name="odom_topic" default="/$(arg namespace)/dr/odom" />
  <arg name="gps_odom_topic" default="/$(arg namespace)/dr/gps_odom"/>
  
    <group ns="$(arg namespace)">
    
      <group ns="dr">

        <!-- Services to go to/from latlon to UTM -->
        <include file="$(find tf_lat_lon)/launch/tf_lat_lon.launch">
            <arg name="frame" value="$(arg namespace)/base_link"/>
        </include>

        <!-- Depth from pressure sensor converter -->
        <node pkg="sam_dead_reckoning" name="press_to_depth" type="press_to_depth.py" output="screen">
          <param name="odom_frame" value="$(arg namespace)/odom" />
          <param name="pressure_topic" value="/$(arg namespace)/core/depth20_pressure" />
          <param name="depth_topic" value="/$(arg namespace)/dr/depth"/>                               <!---->
          <param name="pressure_frame" value="$(arg namespace)/pressure_link" />
          <param name="base_frame" value="$(arg namespace)/base_link" />
        </node>

        <node name="gps_pose_pub" pkg="sam_dead_reckoning" type="gps_node.py" respawn="true" output="screen">
          <param name="gps_topic" value="/$(arg namespace)/core/gps" />
          <param name="map_frame" value="map" />
          <param name="utm_frame" value="utm" />
          <param name="gps_frame" value="$(arg namespace)/gps_link" />
          <param name="gps_odom_topic" value="$(arg gps_odom_topic)" />
        </node>
        
        <node pkg="sam_dead_reckoning" name="dr_node" type="dr_node.py" output="screen">
          <param name="dvl_topic" value="/$(arg namespace)/core/dvl" />
          <param name="odom_topic" value="$(arg odom_topic)" />
          <param name="stim_imu" value="/$(arg namespace)/core/imu" />
          <param name="sbg_topic" value="/$(arg namespace)/core/sbg_imu" />
          <param name="depth_topic" value="/$(arg namespace)/dr/depth"/>                               <!---->
          <param name="thrust1_fb" value="/$(arg namespace)/core/thruster1_fb" />
          <param name="thrust2_fb" value="/$(arg namespace)/core/thruster2_fb" />
          <param name="thrust_vec_cmd" value="/$(arg namespace)/core/thrust_vector_cmd" />
          <param name="gps_odom_topic" value="$(arg gps_odom_topic)" />
          <param name="pressure_frame" value="$(arg namespace)/pressure_link" />
          <param name="odom_frame" value="$(arg namespace)/odom" />
          <param name="utm_frame" value="utm" />
          <param name="base_frame" value="$(arg namespace)/base_link" />
          <param name="map_frame" value="map" />
          <param name="dvl_frame" value="$(arg namespace)/dvl_link" />
          <param name="dvl_period" value="0.1" />
          <param name="dr_period" value="0.02" />
        </node>
      
        <include file="$(find auv_particle_filter)/launch/auv_pf.launch">
            <arg name="map_frame" value="map"/>
            <arg name="utm_frame" value="utm"/>
            <arg name="odom_frame" value="$(arg namespace)/odom"/>
            <arg name="base_frame" value="$(arg namespace)/base_link" />
            <arg name="odom_topic" value="$(arg odom_topic)" />
            <arg name="gps_odom_topic" value="$(arg gps_odom_topic)" />
        </include>

        <node pkg="auv_particle_filter" name="visual_tools" type="visual_tools.py" output="screen">
          <param name="odom_topic" value="$(arg odom_topic)" />
          <param name="odom_corrected_topic" value="/$(arg namespace)/dr/odom_corrected"/>
          <param name="gps_odom_topic" value="$(arg gps_odom_topic)" />
        </node>

        <!--Including tf_convenience topics-->
    	  <node name="odom_listener" pkg="tf_convenience_topics" type="odom_listener" output="screen" >
	    	  <param name="odom_topic" value="/$(arg namespace)/dr/odom"/>
	    	  <param name="topic_from_dvl" value="$/(arg namespace)/core/dvl"/>
        	<param name="loop_freq" value="10" />
    	  </node>

      </group>
    </group>

</launch>
