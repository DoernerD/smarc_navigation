<launch>

  <arg name="debug" default="0"/>
  <arg name="mode" default="default"/>
  <arg name="robot_name" default="sam"/>
  <arg name="namespace" default="sam"/>

  
  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <arg name="map_odom_tf_ekf" default="false"/>

  <group ns="$(arg namespace)">
    <!-- TF broadcaster world to AUV odom -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="tf_world_odom_publisher" args="$(arg x) $(arg y) $(arg z) $(arg roll) $(arg pitch) $(arg yaw) world $(arg namespace)/odom 50" /> -->

    <param name="robot_description"
           command="$(find xacro)/xacro.py '$(find sam_description)/robots/sam_auv_$(arg mode).urdf.xacro' debug:=$(arg debug) namespace:=$(arg namespace)" />

     <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
<!--     <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/> -->

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" respawn="true" output="screen">
      <param name="use_gui" value="false"/>
      <rosparam param="source_list">["/sam/command_states"]</rosparam>
    </node>

    <!-- Publish robot model for ROS -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
      <param name="robot_description" value="/$(arg namespace)/robot_description" />
    </node>

    </group>

    <group ns="$(arg robot_name)">
    <group ns="dr">

        <node name="gps_pose_pub" pkg="sam_dead_reckoning" type="publish_gps_pose.py" respawn="true" output="screen"/>

        <!-- <include file="$(find tf_lat_lon)/launch/tf_lat_lon.launch">
            <arg name="frame" value="$(arg robot_name)/base_link"/>
        </include> -->
        
        <!-- If EKF set to not bc this transform, do it here -->
        <!--Publish a static coordinate transform to tf using offsets passed as arguments x/y/z(0/0/0 in meters) and yaw/pitch/roll(0/0/0 in radians)-->
        <!--100 ms is the period, which specifies how often to send the transform-->
        <!-- <node name="map_2_odom" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 map $(arg robot_name)/odom 100" unless="$(arg map_odom_tf_ekf)"/> -->

    <!--   <node pkg="sam_dead_reckoning" name="motion_model" type="motion_model.py" output="screen">
        <param name="thrust_dr" value="/$(arg robot_name)/dr/motion_dr" />
        <param name="thrust_fb" value="/$(arg robot_name)/core/rpm_fb" />
        <param name="sbg_imu" value="/$(arg robot_name)/core/sbg_imu" />
        <param name="odom_frame" value="$(arg robot_name)/odom" />
        <param name="base_frame" value="$(arg robot_name)/base_link" />
      </node> -->

      <node pkg="sam_dead_reckoning" name="acc_model" type="acc_model.py" output="screen">
        <param name="thrust1_fb" value="/$(arg robot_name)/core/thruster1_fb" />
        <param name="thrust2_fb" value="/$(arg robot_name)/core/thruster2_fb" />
        <param name="thrust_acc" value="/$(arg robot_name)/dr/motion_acc" />
      </node>

      <!-- DVL to Twist msg converter -->
      <node pkg="sam_dead_reckoning" name="dvl_twist" type="dvl_twist.py" output="screen">
        <param name="dvl_topic" value="/$(arg robot_name)/core/dvl" />
        <param name="twist_topic" value="/$(arg robot_name)/dr/dvl_twist" />
        <param name="dvl_link" value="$(arg robot_name)/dvl_link" />
      </node>

      
      <node pkg="sam_dead_reckoning" name="dvl_dr" type="dvl_dr.py" output="screen">
        <param name="dvl_topic" value="/$(arg robot_name)/core/dvl" />
        <param name="dvl_dr_topic" value="/$(arg robot_name)/dr/dvl_dr" />
        <param name="stim_imu" value="/$(arg robot_name)/core/imu" />
        <param name="sbg_euler" value="/$(arg robot_name)/sbg/ekf_euler" />
        <param name="odom_frame" value="$(arg robot_name)/odom" />
        <param name="base_frame" value="$(arg robot_name)/base_link" />
        <param name="dvl_link" value="$(arg robot_name)/dvl_link" />
        <param name="dr_odom_filtered" value="local/odom/filtered" />
      </node>
     

    </group>
    </group>

</launch>
