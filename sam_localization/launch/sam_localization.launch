<launch>

    <arg name="namespace" default="sam_auv"/>
    <arg name="mode" default="default"/>
    <arg name="debug" default="0"/>

    <arg name="x" default="0"/>
    <arg name="y" default="0"/>
    <arg name="z" default="0"/>
    <arg name="roll" default="0.0"/>
    <arg name="pitch" default="0.0"/>
    <arg name="yaw" default="0.0"/>

      <!-- TF broadcaster world to AUV odom -->
    <node pkg="tf" type="static_transform_publisher" name="$(arg namespace)_world_odom" args="$(arg x) $(arg y) $(arg z) $(arg roll) $(arg pitch) $(arg yaw) world $(arg namespace)_odom 50" />

    <!-- STIM300 IMU driver -->
    <node pkg="stim300_ros_driver" name="stim_imu_driver" type="driver" output="screen">
        <param name="device_path" value="/dev/ttyUSB0" />
<!--         <param name="output_topic" value="sam_imu" />
        <param name="imu_frame" value="/base_link" />
 -->    </node>


    <!-- EKF for fusing continuous position data from wheel odometry and IMU -->
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_loc_local" output="screen" clear_params="true">
        <param name="frequency" value="30"/>
        <param name="sensor_timeout" value="0.1"/>
        <param name="two_d_mode" value="false"/>

        <!-- <param name="map_frame" value="map"/> -->
        <param name="odom_frame" value="$(arg namespace)_odom"/>
        <param name="base_link_frame" value="base_link"/>
        <param name="world_frame" value="$(arg namespace)_odom"/>

        <param name="transform_time_offset" value="0.0"/>
        <param name="transform_timeout" value="0.0"/>

        <rosparam param="initial_state">[0.0,  0.0,  0.0,
                                         0.0,  0.0,  0.0,
                                         0.0,  0.0,  0.0,
                                         0.0,  0.0,  0.0,
                                         0.0,  0.0,  0.0]</rosparam>


        <!-- IMU -->
        <param name="imu0" value="/imu"/>

        <!--
            x,     y,      z,
            roll,  pitch,  yaw,
            vx,    vy,     vz,
            vroll, vpitch, vyaw,
            ax,    ay,     az
         -->

        <rosparam param="imu0_config">[false, false, false,
                                       true, true, true,
                                       false, false, false,
                                       false, false, true,
                                       false, false, false]</rosparam>

        <param name="imu0_differential" value="false"/>
        <param name="imu0_relative" value="true"/>
        <param name="imu0_remove_gravitational_acceleration" value="true"/>
        <param name="gravitational_acceleration" value="9.860"/>


        <!-- Node params -->
        <param name="publish_tf" value="true"/>
        <param name="publish_acceleration" value="false"/>

        <!-- Advanced node params -->
        <param name="use_control" value="false"/>
        <param name="stamped_control" value="false"/>

        <!-- Outputs -->
        <remap from="odometry/filtered" to="odometry/filtered/sam"/>
        <remap from="set_pose" to="/initialpose"/> <!--Service to reset initial pose -->
    </node>


    <group ns="$(arg namespace)">
    <param name="robot_description"
           command="$(find xacro)/xacro.py '$(find smarc_private_auvs)/models/sam_auv/robots/sam_auv_$(arg mode).urdf.xacro' debug:=$(arg debug) namespace:=$(arg namespace)" />

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
<!--     <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/> -->

    <!-- A joint state publisher plugin already is started with the model, no need to use the default joint state publisher -->

    <!-- Publish robot model for ROS -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
      <param name="robot_description" value="/$(arg namespace)/robot_description" />
    </node>
  </group>

</launch>